{"remainingRequest":"/Users/tim/Desktop/电商程序/package 2/node_modules/thread-loader/dist/cjs.js!/Users/tim/Desktop/电商程序/package 2/node_modules/babel-loader/lib/index.js!/Users/tim/Desktop/电商程序/package 2/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/tim/Desktop/电商程序/package 2/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tim/Desktop/电商程序/package 2/src/views/userMember/identity/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/tim/Desktop/电商程序/package 2/src/views/userMember/identity/index.vue","mtime":499162500000},{"path":"/Users/tim/Desktop/电商程序/package 2/babel.config.js","mtime":499162500000},{"path":"/Users/tim/Desktop/电商程序/package 2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tim/Desktop/电商程序/package 2/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tim/Desktop/电商程序/package 2/node_modules/babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/tim/Desktop/电商程序/package 2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tim/Desktop/电商程序/package 2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}